{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "af56fbbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import datetime\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "918f3c66",
   "metadata": {},
   "source": [
    "### Question 1\n",
    "It is clearly a regression problem because we want to predict the number of passengers which is more or less continuous. \n",
    "It also is a supervised problem because we have a problem of the form $y = f(x)$ where $y$ is the output we want: the number of passengers and $X$ is the data set. Our goal is then to approximate the mapping function so well that when there is a new input data (x) then the corresponding output variable can be predicted."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "848db9eb",
   "metadata": {},
   "source": [
    "### Question 2 : Data inspection\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d55005f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DateOfDeparture</th>\n",
       "      <th>Departure</th>\n",
       "      <th>Arrival</th>\n",
       "      <th>WeeksToDeparture</th>\n",
       "      <th>log_PAX</th>\n",
       "      <th>std_wtd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012-06-19</td>\n",
       "      <td>ORD</td>\n",
       "      <td>DFW</td>\n",
       "      <td>12.875000</td>\n",
       "      <td>12.331296</td>\n",
       "      <td>9.812647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012-09-10</td>\n",
       "      <td>LAS</td>\n",
       "      <td>DEN</td>\n",
       "      <td>14.285714</td>\n",
       "      <td>10.775182</td>\n",
       "      <td>9.466734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012-10-05</td>\n",
       "      <td>DEN</td>\n",
       "      <td>LAX</td>\n",
       "      <td>10.863636</td>\n",
       "      <td>11.083177</td>\n",
       "      <td>9.035883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-10-09</td>\n",
       "      <td>ATL</td>\n",
       "      <td>ORD</td>\n",
       "      <td>11.480000</td>\n",
       "      <td>11.169268</td>\n",
       "      <td>7.990202</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012-02-21</td>\n",
       "      <td>DEN</td>\n",
       "      <td>SFO</td>\n",
       "      <td>11.450000</td>\n",
       "      <td>11.269364</td>\n",
       "      <td>9.517159</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  DateOfDeparture Departure Arrival  WeeksToDeparture    log_PAX   std_wtd\n",
       "0      2012-06-19       ORD     DFW         12.875000  12.331296  9.812647\n",
       "1      2012-09-10       LAS     DEN         14.285714  10.775182  9.466734\n",
       "2      2012-10-05       DEN     LAX         10.863636  11.083177  9.035883\n",
       "3      2011-10-09       ATL     ORD         11.480000  11.169268  7.990202\n",
       "4      2012-02-21       DEN     SFO         11.450000  11.269364  9.517159"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('./train.csv.bz2')\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "aaaad0f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The data set contains 8902 rows and 6 columns\n"
     ]
    }
   ],
   "source": [
    "print(f'The data set contains {data.shape[0]} rows and {data.shape[1]} columns')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7ba6f99b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DateOfDeparture      object\n",
       "Departure            object\n",
       "Arrival              object\n",
       "WeeksToDeparture    float64\n",
       "log_PAX             float64\n",
       "std_wtd             float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7dbdfab9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['DateOfDeparture'] ['Departure', 'Arrival'] ['WeeksToDeparture', 'log_PAX', 'std_wtd']\n"
     ]
    }
   ],
   "source": [
    "# Hence we can separate the columns in several lists \n",
    "date_object = list(data.dtypes[0:1].index)\n",
    "categorical_data = list(data.dtypes[1:3].index)\n",
    "numerical_data = list(data.dtypes[3:6].index)\n",
    "print(date_object, categorical_data, numerical_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "46e46ad0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DateOfDeparture     0\n",
       "Departure           0\n",
       "Arrival             0\n",
       "WeeksToDeparture    0\n",
       "log_PAX             0\n",
       "std_wtd             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sum(data.isna())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d8bcd69",
   "metadata": {},
   "source": [
    "There's no NA values, let's check for outliers in our numerical data: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e5ea2fe4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Max \n",
      " : WeeksToDeparture    23.163265\n",
      "log_PAX             14.007791\n",
      "std_wtd             15.862216\n",
      "dtype: float64 \n",
      " Min : \n",
      " WeeksToDeparture    2.625000\n",
      "log_PAX             3.878108\n",
      "std_wtd             2.160247\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print('Max \\n :', np.max(data[numerical_data]), \"\\n Min : \\n\", np.min(data[numerical_data]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e122edce",
   "metadata": {},
   "source": [
    "The numerical data seems just fine "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f811769f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Departure : \n",
      " ['ORD' 'LAS' 'DEN' 'ATL' 'SFO' 'EWR' 'IAH' 'LAX' 'DFW' 'SEA' 'JFK' 'PHL'\n",
      " 'MIA' 'DTW' 'BOS' 'MSP' 'CLT' 'MCO' 'PHX' 'LGA'] \n",
      " Arrival : \n",
      " ['DFW' 'DEN' 'LAX' 'ORD' 'SFO' 'MCO' 'LAS' 'CLT' 'MSP' 'EWR' 'PHX' 'DTW'\n",
      " 'MIA' 'BOS' 'PHL' 'JFK' 'ATL' 'LGA' 'SEA' 'IAH']\n",
      "The departure and arrivals are the same : True\n"
     ]
    }
   ],
   "source": [
    "print('Departure : \\n', pd.unique(data['Departure']), '\\n Arrival : \\n', pd.unique(data['Arrival']))\n",
    "print(f'The departure and arrivals are the same : {pd.unique(data[\"Departure\"]) in pd.unique(data[\"Arrival\"])}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb106bf4",
   "metadata": {},
   "source": [
    "So seems the categorical data :"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b072977",
   "metadata": {},
   "source": [
    "### Question 3 :  taking care of the date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "77dadf10",
   "metadata": {},
   "outputs": [],
   "source": [
    "date = pd.to_datetime(data[\"DateOfDeparture\"], format=\"%Y-%m-%d\") \n",
    "data['DateOfDeparture'] = date\n",
    "data['day'] = data.DateOfDeparture.dt.day\n",
    "data['week'] = data.DateOfDeparture.dt.isocalendar().week\n",
    "data['month'] = data.DateOfDeparture.dt.month\n",
    "data['year'] = data.DateOfDeparture.dt.year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1cc40a9d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DateOfDeparture</th>\n",
       "      <th>Departure</th>\n",
       "      <th>Arrival</th>\n",
       "      <th>WeeksToDeparture</th>\n",
       "      <th>log_PAX</th>\n",
       "      <th>std_wtd</th>\n",
       "      <th>day</th>\n",
       "      <th>week</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012-06-19</td>\n",
       "      <td>ORD</td>\n",
       "      <td>DFW</td>\n",
       "      <td>12.875000</td>\n",
       "      <td>12.331296</td>\n",
       "      <td>9.812647</td>\n",
       "      <td>19</td>\n",
       "      <td>25</td>\n",
       "      <td>6</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012-09-10</td>\n",
       "      <td>LAS</td>\n",
       "      <td>DEN</td>\n",
       "      <td>14.285714</td>\n",
       "      <td>10.775182</td>\n",
       "      <td>9.466734</td>\n",
       "      <td>10</td>\n",
       "      <td>37</td>\n",
       "      <td>9</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012-10-05</td>\n",
       "      <td>DEN</td>\n",
       "      <td>LAX</td>\n",
       "      <td>10.863636</td>\n",
       "      <td>11.083177</td>\n",
       "      <td>9.035883</td>\n",
       "      <td>5</td>\n",
       "      <td>40</td>\n",
       "      <td>10</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-10-09</td>\n",
       "      <td>ATL</td>\n",
       "      <td>ORD</td>\n",
       "      <td>11.480000</td>\n",
       "      <td>11.169268</td>\n",
       "      <td>7.990202</td>\n",
       "      <td>9</td>\n",
       "      <td>40</td>\n",
       "      <td>10</td>\n",
       "      <td>2011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012-02-21</td>\n",
       "      <td>DEN</td>\n",
       "      <td>SFO</td>\n",
       "      <td>11.450000</td>\n",
       "      <td>11.269364</td>\n",
       "      <td>9.517159</td>\n",
       "      <td>21</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8897</th>\n",
       "      <td>2011-10-02</td>\n",
       "      <td>DTW</td>\n",
       "      <td>ATL</td>\n",
       "      <td>9.263158</td>\n",
       "      <td>10.427055</td>\n",
       "      <td>7.316967</td>\n",
       "      <td>2</td>\n",
       "      <td>39</td>\n",
       "      <td>10</td>\n",
       "      <td>2011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8898</th>\n",
       "      <td>2012-09-25</td>\n",
       "      <td>DFW</td>\n",
       "      <td>ORD</td>\n",
       "      <td>12.772727</td>\n",
       "      <td>12.201552</td>\n",
       "      <td>10.641034</td>\n",
       "      <td>25</td>\n",
       "      <td>39</td>\n",
       "      <td>9</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8899</th>\n",
       "      <td>2012-01-19</td>\n",
       "      <td>SFO</td>\n",
       "      <td>LAS</td>\n",
       "      <td>11.047619</td>\n",
       "      <td>10.508746</td>\n",
       "      <td>7.908705</td>\n",
       "      <td>19</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8900</th>\n",
       "      <td>2013-02-03</td>\n",
       "      <td>ORD</td>\n",
       "      <td>PHL</td>\n",
       "      <td>6.076923</td>\n",
       "      <td>10.174042</td>\n",
       "      <td>4.030334</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8901</th>\n",
       "      <td>2011-11-26</td>\n",
       "      <td>DTW</td>\n",
       "      <td>ATL</td>\n",
       "      <td>9.526316</td>\n",
       "      <td>9.202674</td>\n",
       "      <td>6.167733</td>\n",
       "      <td>26</td>\n",
       "      <td>47</td>\n",
       "      <td>11</td>\n",
       "      <td>2011</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8902 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     DateOfDeparture Departure Arrival  WeeksToDeparture    log_PAX  \\\n",
       "0         2012-06-19       ORD     DFW         12.875000  12.331296   \n",
       "1         2012-09-10       LAS     DEN         14.285714  10.775182   \n",
       "2         2012-10-05       DEN     LAX         10.863636  11.083177   \n",
       "3         2011-10-09       ATL     ORD         11.480000  11.169268   \n",
       "4         2012-02-21       DEN     SFO         11.450000  11.269364   \n",
       "...              ...       ...     ...               ...        ...   \n",
       "8897      2011-10-02       DTW     ATL          9.263158  10.427055   \n",
       "8898      2012-09-25       DFW     ORD         12.772727  12.201552   \n",
       "8899      2012-01-19       SFO     LAS         11.047619  10.508746   \n",
       "8900      2013-02-03       ORD     PHL          6.076923  10.174042   \n",
       "8901      2011-11-26       DTW     ATL          9.526316   9.202674   \n",
       "\n",
       "        std_wtd  day  week  month  year  \n",
       "0      9.812647   19    25      6  2012  \n",
       "1      9.466734   10    37      9  2012  \n",
       "2      9.035883    5    40     10  2012  \n",
       "3      7.990202    9    40     10  2011  \n",
       "4      9.517159   21     8      2  2012  \n",
       "...         ...  ...   ...    ...   ...  \n",
       "8897   7.316967    2    39     10  2011  \n",
       "8898  10.641034   25    39      9  2012  \n",
       "8899   7.908705   19     3      1  2012  \n",
       "8900   4.030334    3     5      2  2013  \n",
       "8901   6.167733   26    47     11  2011  \n",
       "\n",
       "[8902 rows x 10 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94c54b69",
   "metadata": {},
   "source": [
    "Let's take care of the holidays: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "970089ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DateOfDeparture</th>\n",
       "      <th>Departure</th>\n",
       "      <th>Arrival</th>\n",
       "      <th>WeeksToDeparture</th>\n",
       "      <th>log_PAX</th>\n",
       "      <th>std_wtd</th>\n",
       "      <th>day</th>\n",
       "      <th>week</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>Holiday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012-06-19</td>\n",
       "      <td>ORD</td>\n",
       "      <td>DFW</td>\n",
       "      <td>12.875000</td>\n",
       "      <td>12.331296</td>\n",
       "      <td>9.812647</td>\n",
       "      <td>19</td>\n",
       "      <td>25</td>\n",
       "      <td>6</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012-09-10</td>\n",
       "      <td>LAS</td>\n",
       "      <td>DEN</td>\n",
       "      <td>14.285714</td>\n",
       "      <td>10.775182</td>\n",
       "      <td>9.466734</td>\n",
       "      <td>10</td>\n",
       "      <td>37</td>\n",
       "      <td>9</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012-10-05</td>\n",
       "      <td>DEN</td>\n",
       "      <td>LAX</td>\n",
       "      <td>10.863636</td>\n",
       "      <td>11.083177</td>\n",
       "      <td>9.035883</td>\n",
       "      <td>5</td>\n",
       "      <td>40</td>\n",
       "      <td>10</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-10-09</td>\n",
       "      <td>ATL</td>\n",
       "      <td>ORD</td>\n",
       "      <td>11.480000</td>\n",
       "      <td>11.169268</td>\n",
       "      <td>7.990202</td>\n",
       "      <td>9</td>\n",
       "      <td>40</td>\n",
       "      <td>10</td>\n",
       "      <td>2011</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012-02-21</td>\n",
       "      <td>DEN</td>\n",
       "      <td>SFO</td>\n",
       "      <td>11.450000</td>\n",
       "      <td>11.269364</td>\n",
       "      <td>9.517159</td>\n",
       "      <td>21</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  DateOfDeparture Departure Arrival  WeeksToDeparture    log_PAX   std_wtd  \\\n",
       "0      2012-06-19       ORD     DFW         12.875000  12.331296  9.812647   \n",
       "1      2012-09-10       LAS     DEN         14.285714  10.775182  9.466734   \n",
       "2      2012-10-05       DEN     LAX         10.863636  11.083177  9.035883   \n",
       "3      2011-10-09       ATL     ORD         11.480000  11.169268  7.990202   \n",
       "4      2012-02-21       DEN     SFO         11.450000  11.269364  9.517159   \n",
       "\n",
       "   day  week  month  year  Holiday  \n",
       "0   19    25      6  2012        0  \n",
       "1   10    37      9  2012        0  \n",
       "2    5    40     10  2012        0  \n",
       "3    9    40     10  2011        0  \n",
       "4   21     8      2  2012        0  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pandas.tseries.holiday import USFederalHolidayCalendar as calendar\n",
    "cal = calendar()\n",
    "\n",
    "holidays = cal.holidays(start=data.DateOfDeparture.min(), end=data.DateOfDeparture.max())\n",
    "data['Holiday'] = data['DateOfDeparture'].isin(holidays).astype(int)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fcaa8188",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Departure</th>\n",
       "      <th>Arrival</th>\n",
       "      <th>WeeksToDeparture</th>\n",
       "      <th>log_PAX</th>\n",
       "      <th>std_wtd</th>\n",
       "      <th>day</th>\n",
       "      <th>week</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>Holiday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ORD</td>\n",
       "      <td>DFW</td>\n",
       "      <td>12.875000</td>\n",
       "      <td>12.331296</td>\n",
       "      <td>9.812647</td>\n",
       "      <td>19</td>\n",
       "      <td>25</td>\n",
       "      <td>6</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LAS</td>\n",
       "      <td>DEN</td>\n",
       "      <td>14.285714</td>\n",
       "      <td>10.775182</td>\n",
       "      <td>9.466734</td>\n",
       "      <td>10</td>\n",
       "      <td>37</td>\n",
       "      <td>9</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DEN</td>\n",
       "      <td>LAX</td>\n",
       "      <td>10.863636</td>\n",
       "      <td>11.083177</td>\n",
       "      <td>9.035883</td>\n",
       "      <td>5</td>\n",
       "      <td>40</td>\n",
       "      <td>10</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ATL</td>\n",
       "      <td>ORD</td>\n",
       "      <td>11.480000</td>\n",
       "      <td>11.169268</td>\n",
       "      <td>7.990202</td>\n",
       "      <td>9</td>\n",
       "      <td>40</td>\n",
       "      <td>10</td>\n",
       "      <td>2011</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>DEN</td>\n",
       "      <td>SFO</td>\n",
       "      <td>11.450000</td>\n",
       "      <td>11.269364</td>\n",
       "      <td>9.517159</td>\n",
       "      <td>21</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Departure Arrival  WeeksToDeparture    log_PAX   std_wtd  day  week  month  \\\n",
       "0       ORD     DFW         12.875000  12.331296  9.812647   19    25      6   \n",
       "1       LAS     DEN         14.285714  10.775182  9.466734   10    37      9   \n",
       "2       DEN     LAX         10.863636  11.083177  9.035883    5    40     10   \n",
       "3       ATL     ORD         11.480000  11.169268  7.990202    9    40     10   \n",
       "4       DEN     SFO         11.450000  11.269364  9.517159   21     8      2   \n",
       "\n",
       "   year  Holiday  \n",
       "0  2012        0  \n",
       "1  2012        0  \n",
       "2  2012        0  \n",
       "3  2011        0  \n",
       "4  2012        0  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.drop(\"DateOfDeparture\", axis=1, inplace = True)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2266a7a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b0377b0a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['log_PAX'].hist();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75154bcb",
   "metadata": {},
   "source": [
    "### Question 4 : select numerical data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "421756db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WeeksToDeparture</th>\n",
       "      <th>log_PAX</th>\n",
       "      <th>std_wtd</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>Holiday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12.875000</td>\n",
       "      <td>12.331296</td>\n",
       "      <td>9.812647</td>\n",
       "      <td>19</td>\n",
       "      <td>6</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14.285714</td>\n",
       "      <td>10.775182</td>\n",
       "      <td>9.466734</td>\n",
       "      <td>10</td>\n",
       "      <td>9</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10.863636</td>\n",
       "      <td>11.083177</td>\n",
       "      <td>9.035883</td>\n",
       "      <td>5</td>\n",
       "      <td>10</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.480000</td>\n",
       "      <td>11.169268</td>\n",
       "      <td>7.990202</td>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "      <td>2011</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11.450000</td>\n",
       "      <td>11.269364</td>\n",
       "      <td>9.517159</td>\n",
       "      <td>21</td>\n",
       "      <td>2</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   WeeksToDeparture    log_PAX   std_wtd  day  month  year  Holiday\n",
       "0         12.875000  12.331296  9.812647   19      6  2012        0\n",
       "1         14.285714  10.775182  9.466734   10      9  2012        0\n",
       "2         10.863636  11.083177  9.035883    5     10  2012        0\n",
       "3         11.480000  11.169268  7.990202    9     10  2011        0\n",
       "4         11.450000  11.269364  9.517159   21      2  2012        0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numerical_data = data.select_dtypes(include=['float64','int64'])\n",
    "numerical_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c4a5f01",
   "metadata": {},
   "source": [
    "### Question 5: RMSE "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d91c43ce",
   "metadata": {},
   "source": [
    "The Root Mean Squared Error of an estimator $ \\hat{\\theta} $ compared to a parameter $ \\theta $ is defined as : \n",
    "$$ \\sqrt{MSE(\\hat{\\theta}}) = \\sqrt{(E((\\hat{\\theta}-\\theta)^2)} $$\n",
    "RMSE is the most easily interpreted statistic, as it has the same units as the quantity plotted on the vertical axis or Y-axis. Here we will estimate with several models the parameter log_PAX that we already have so it makes sense to use the RMSE as a performance measure. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc514dc4",
   "metadata": {},
   "source": [
    "### Question 6 : train-test split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e9dd4ebf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The training dataset contains 6676 samples and 6 features\n",
      "The testing dataset contains 2226 samples and 6 features\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X = numerical_data.loc[:, numerical_data.columns!='log_PAX']\n",
    "y = numerical_data.loc[:, 'log_PAX']\n",
    "\n",
    "data_train, data_test, target_train, target_test = train_test_split(X, y, random_state=42)\n",
    "\n",
    "print(\n",
    "    f\"The training dataset contains {data_train.shape[0]} samples and \"\n",
    "    f\"{data_train.shape[1]} features\"\n",
    ")\n",
    "print(\n",
    "    f\"The testing dataset contains {data_test.shape[0]} samples and \"\n",
    "    f\"{data_test.shape[1]} features\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82dbc179",
   "metadata": {},
   "source": [
    "#### The decision tree regressor \n",
    "\n",
    "Decision tree builds regression or classification models in the form of a tree structure. It breaks down a dataset into smaller and smaller subsets while at the same time an associated decision tree is incrementally developed. The final result is a tree with decision nodes and leaf nodes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d41e4607",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the model was trained in 0.038\n"
     ]
    }
   ],
   "source": [
    "from sklearn import tree\n",
    "import time\n",
    "\n",
    "model = tree.DecisionTreeRegressor()\n",
    "\n",
    "start = time.time()\n",
    "model.fit(data_train, target_train)\n",
    "elapsed_time = time.time() - start \n",
    "\n",
    "print(f\"the model was trained in {elapsed_time:.3f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b8d83c4f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE = 1.2032444433972622\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "y_true = target_test\n",
    "y_predict = model.predict(data_test)\n",
    "\n",
    "m = mean_squared_error(y_true, y_predict)\n",
    "rmse = np.sqrt(m)\n",
    "print(f\"RMSE = {rmse}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d888518",
   "metadata": {},
   "source": [
    "### Parameter tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "374a13f4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ccp_alpha\n",
      "criterion\n",
      "max_depth\n",
      "max_features\n",
      "max_leaf_nodes\n",
      "min_impurity_decrease\n",
      "min_samples_leaf\n",
      "min_samples_split\n",
      "min_weight_fraction_leaf\n",
      "random_state\n",
      "splitter\n"
     ]
    }
   ],
   "source": [
    "for param_name in model.get_params().keys():\n",
    "    print(param_name)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bd8047f",
   "metadata": {},
   "source": [
    "Here we are interested in the max_depth criterion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "4842a5e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy score using a GridSearchCV is 0.08 in 10.520 seconds\n",
      "The best set of parameters is: {'max_depth': 5}\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "param_grid = {'max_depth' : range(1,100)}\n",
    "\n",
    "model_grid_search = GridSearchCV(model, param_grid=param_grid, n_jobs=4, cv=5)# cv = 5 fold cross-validation \n",
    "# n_jobs = nb of core on the computer\n",
    "start = time.time()\n",
    "model_grid_search.fit(data_train, target_train)\n",
    "elapsed_time = time.time() - start\n",
    "print(\n",
    "    f\"The accuracy score using a {model_grid_search.__class__.__name__} is \"\n",
    "    f\"{model_grid_search.score(data_test, target_test):.2f} in \"\n",
    "    f\"{elapsed_time:.3f} seconds\"\n",
    ")\n",
    "print(f\"The best set of parameters is: {model_grid_search.best_params_}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "20176491",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy score using a GridSearchCV is 0.08 in 2.469 seconds\n",
      "The best set of parameters is: {'max_depth': 5.799999999999994}\n"
     ]
    }
   ],
   "source": [
    "param_grid = {'max_depth' : np.arange(4.0, 10.0, 0.1)}\n",
    "\n",
    "model_grid_search = GridSearchCV(model, param_grid=param_grid, n_jobs=4, cv=5)# cv = 5 fold cross-validation # n_jobs = nb of core on the computer\n",
    "start = time.time()\n",
    "model_grid_search.fit(data_train, target_train)\n",
    "elapsed_time = time.time() - start\n",
    "print(\n",
    "    f\"The accuracy score using a {model_grid_search.__class__.__name__} is \"\n",
    "    f\"{model_grid_search.score(data_test, target_test):.2f} in \"\n",
    "    f\"{elapsed_time:.3f} seconds\"\n",
    ")\n",
    "print(f\"The best set of parameters is: {model_grid_search.best_params_}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9161be7c",
   "metadata": {},
   "source": [
    "We'll choose 5.1 for the max_depth"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "0261604e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The model was trained in 0.014 s\n"
     ]
    }
   ],
   "source": [
    "model_tuned = tree.DecisionTreeRegressor(max_depth = 5.1)\n",
    "\n",
    "start = time.time()\n",
    "model_tuned.fit(data_train, target_train)\n",
    "elapsed_time = time.time() - start\n",
    "\n",
    "print(f\"The model was trained in {elapsed_time:.3f} s\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "785727dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE = 0.9321054724477256\n"
     ]
    }
   ],
   "source": [
    "y_true = target_test\n",
    "y_predict = model_tuned.predict(data_test)\n",
    "\n",
    "m = mean_squared_error(y_true, y_predict)\n",
    "rmse = np.sqrt(m)\n",
    "print(f\"RMSE = {rmse}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2e3c4f6f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Ploting the RMSE as a function of the parameter \n",
    "\n",
    "RMSE =[]\n",
    "max_depth_set = np.arange(3,10,0.1)\n",
    "\n",
    "for each_md in max_depth_set:\n",
    "    model_loop = tree.DecisionTreeRegressor(max_depth=each_md)\n",
    "    model_loop.fit(data_train, target_train)\n",
    "    RMSE.append(np.sqrt(mean_squared_error(target_test, model_loop.predict(data_test))))\n",
    "    \n",
    "    \n",
    "plt.plot(max_depth_set, RMSE);\n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e74773f7",
   "metadata": {},
   "source": [
    "## Question 7 : Standard Scaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "12f885b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the model was fitted in 0.022\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.pipeline import make_pipeline\n",
    "\n",
    "scaler = StandardScaler()\n",
    "model_scaled = make_pipeline(StandardScaler(), tree.DecisionTreeRegressor(max_depth=9))\n",
    "start = time.time()\n",
    "model_scaled.fit(data_train, target_train)\n",
    "elapsed_time = time.time() - start\n",
    "print(f\"the model was fitted in {elapsed_time:.3f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "18a5fd64",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9207177930346298"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(mean_squared_error(target_test, model_scaled.predict(data_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e696e279",
   "metadata": {},
   "source": [
    "It doesn't change anything"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "495b6b0a",
   "metadata": {},
   "source": [
    "## Question 8 : Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "9e86ece0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9193001248782007"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "model = LinearRegression()\n",
    "model.fit(data_train, target_train)\n",
    "\n",
    "\n",
    "mean_squared_error(target_test, model.predict(data_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "0a36a62e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9588014001231969"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_scaled = make_pipeline(StandardScaler(), LinearRegression())\n",
    "model_scaled.fit(data_train, target_train)\n",
    "\n",
    "np.sqrt(mean_squared_error(target_test, model_scaled.predict(data_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a6f0408",
   "metadata": {},
   "source": [
    "Feature normalization worsens our model's RMSE"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf2b285b",
   "metadata": {},
   "source": [
    "## Question 9 : OneHotEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "35f317c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Departure</th>\n",
       "      <th>Arrival</th>\n",
       "      <th>WeeksToDeparture</th>\n",
       "      <th>log_PAX</th>\n",
       "      <th>std_wtd</th>\n",
       "      <th>day</th>\n",
       "      <th>week</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>Holiday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ORD</td>\n",
       "      <td>DFW</td>\n",
       "      <td>12.875000</td>\n",
       "      <td>12.331296</td>\n",
       "      <td>9.812647</td>\n",
       "      <td>19</td>\n",
       "      <td>25</td>\n",
       "      <td>6</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LAS</td>\n",
       "      <td>DEN</td>\n",
       "      <td>14.285714</td>\n",
       "      <td>10.775182</td>\n",
       "      <td>9.466734</td>\n",
       "      <td>10</td>\n",
       "      <td>37</td>\n",
       "      <td>9</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DEN</td>\n",
       "      <td>LAX</td>\n",
       "      <td>10.863636</td>\n",
       "      <td>11.083177</td>\n",
       "      <td>9.035883</td>\n",
       "      <td>5</td>\n",
       "      <td>40</td>\n",
       "      <td>10</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ATL</td>\n",
       "      <td>ORD</td>\n",
       "      <td>11.480000</td>\n",
       "      <td>11.169268</td>\n",
       "      <td>7.990202</td>\n",
       "      <td>9</td>\n",
       "      <td>40</td>\n",
       "      <td>10</td>\n",
       "      <td>2011</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>DEN</td>\n",
       "      <td>SFO</td>\n",
       "      <td>11.450000</td>\n",
       "      <td>11.269364</td>\n",
       "      <td>9.517159</td>\n",
       "      <td>21</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8897</th>\n",
       "      <td>DTW</td>\n",
       "      <td>ATL</td>\n",
       "      <td>9.263158</td>\n",
       "      <td>10.427055</td>\n",
       "      <td>7.316967</td>\n",
       "      <td>2</td>\n",
       "      <td>39</td>\n",
       "      <td>10</td>\n",
       "      <td>2011</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8898</th>\n",
       "      <td>DFW</td>\n",
       "      <td>ORD</td>\n",
       "      <td>12.772727</td>\n",
       "      <td>12.201552</td>\n",
       "      <td>10.641034</td>\n",
       "      <td>25</td>\n",
       "      <td>39</td>\n",
       "      <td>9</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8899</th>\n",
       "      <td>SFO</td>\n",
       "      <td>LAS</td>\n",
       "      <td>11.047619</td>\n",
       "      <td>10.508746</td>\n",
       "      <td>7.908705</td>\n",
       "      <td>19</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8900</th>\n",
       "      <td>ORD</td>\n",
       "      <td>PHL</td>\n",
       "      <td>6.076923</td>\n",
       "      <td>10.174042</td>\n",
       "      <td>4.030334</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2013</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8901</th>\n",
       "      <td>DTW</td>\n",
       "      <td>ATL</td>\n",
       "      <td>9.526316</td>\n",
       "      <td>9.202674</td>\n",
       "      <td>6.167733</td>\n",
       "      <td>26</td>\n",
       "      <td>47</td>\n",
       "      <td>11</td>\n",
       "      <td>2011</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8902 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Departure Arrival  WeeksToDeparture    log_PAX    std_wtd  day  week  \\\n",
       "0          ORD     DFW         12.875000  12.331296   9.812647   19    25   \n",
       "1          LAS     DEN         14.285714  10.775182   9.466734   10    37   \n",
       "2          DEN     LAX         10.863636  11.083177   9.035883    5    40   \n",
       "3          ATL     ORD         11.480000  11.169268   7.990202    9    40   \n",
       "4          DEN     SFO         11.450000  11.269364   9.517159   21     8   \n",
       "...        ...     ...               ...        ...        ...  ...   ...   \n",
       "8897       DTW     ATL          9.263158  10.427055   7.316967    2    39   \n",
       "8898       DFW     ORD         12.772727  12.201552  10.641034   25    39   \n",
       "8899       SFO     LAS         11.047619  10.508746   7.908705   19     3   \n",
       "8900       ORD     PHL          6.076923  10.174042   4.030334    3     5   \n",
       "8901       DTW     ATL          9.526316   9.202674   6.167733   26    47   \n",
       "\n",
       "      month  year  Holiday  \n",
       "0         6  2012        0  \n",
       "1         9  2012        0  \n",
       "2        10  2012        0  \n",
       "3        10  2011        0  \n",
       "4         2  2012        0  \n",
       "...     ...   ...      ...  \n",
       "8897     10  2011        0  \n",
       "8898      9  2012        0  \n",
       "8899      1  2012        0  \n",
       "8900      2  2013        0  \n",
       "8901     11  2011        0  \n",
       "\n",
       "[8902 rows x 10 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "f1a15dc6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Departure</th>\n",
       "      <th>Arrival</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ORD</td>\n",
       "      <td>DFW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LAS</td>\n",
       "      <td>DEN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DEN</td>\n",
       "      <td>LAX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ATL</td>\n",
       "      <td>ORD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>DEN</td>\n",
       "      <td>SFO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8897</th>\n",
       "      <td>DTW</td>\n",
       "      <td>ATL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8898</th>\n",
       "      <td>DFW</td>\n",
       "      <td>ORD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8899</th>\n",
       "      <td>SFO</td>\n",
       "      <td>LAS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8900</th>\n",
       "      <td>ORD</td>\n",
       "      <td>PHL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8901</th>\n",
       "      <td>DTW</td>\n",
       "      <td>ATL</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8902 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Departure Arrival\n",
       "0          ORD     DFW\n",
       "1          LAS     DEN\n",
       "2          DEN     LAX\n",
       "3          ATL     ORD\n",
       "4          DEN     SFO\n",
       "...        ...     ...\n",
       "8897       DTW     ATL\n",
       "8898       DFW     ORD\n",
       "8899       SFO     LAS\n",
       "8900       ORD     PHL\n",
       "8901       DTW     ATL\n",
       "\n",
       "[8902 rows x 2 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_categorical = data.select_dtypes(include=object)\n",
    "data_categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e56f1869",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The dataset encoded contains 40 features\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "encoder = OneHotEncoder(sparse=False)\n",
    "data_encoded = encoder.fit_transform(data_categorical)\n",
    "print(f\"The dataset encoded contains {data_encoded.shape[1]} features\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "800ed830",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Departure_ATL</th>\n",
       "      <th>Departure_BOS</th>\n",
       "      <th>Departure_CLT</th>\n",
       "      <th>Departure_DEN</th>\n",
       "      <th>Departure_DFW</th>\n",
       "      <th>Departure_DTW</th>\n",
       "      <th>Departure_EWR</th>\n",
       "      <th>Departure_IAH</th>\n",
       "      <th>Departure_JFK</th>\n",
       "      <th>Departure_LAS</th>\n",
       "      <th>...</th>\n",
       "      <th>Arrival_LAX</th>\n",
       "      <th>Arrival_LGA</th>\n",
       "      <th>Arrival_MCO</th>\n",
       "      <th>Arrival_MIA</th>\n",
       "      <th>Arrival_MSP</th>\n",
       "      <th>Arrival_ORD</th>\n",
       "      <th>Arrival_PHL</th>\n",
       "      <th>Arrival_PHX</th>\n",
       "      <th>Arrival_SEA</th>\n",
       "      <th>Arrival_SFO</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Departure_ATL  Departure_BOS  Departure_CLT  Departure_DEN  Departure_DFW  \\\n",
       "0            0.0            0.0            0.0            0.0            0.0   \n",
       "1            0.0            0.0            0.0            0.0            0.0   \n",
       "2            0.0            0.0            0.0            1.0            0.0   \n",
       "3            1.0            0.0            0.0            0.0            0.0   \n",
       "4            0.0            0.0            0.0            1.0            0.0   \n",
       "\n",
       "   Departure_DTW  Departure_EWR  Departure_IAH  Departure_JFK  Departure_LAS  \\\n",
       "0            0.0            0.0            0.0            0.0            0.0   \n",
       "1            0.0            0.0            0.0            0.0            1.0   \n",
       "2            0.0            0.0            0.0            0.0            0.0   \n",
       "3            0.0            0.0            0.0            0.0            0.0   \n",
       "4            0.0            0.0            0.0            0.0            0.0   \n",
       "\n",
       "   ...  Arrival_LAX  Arrival_LGA  Arrival_MCO  Arrival_MIA  Arrival_MSP  \\\n",
       "0  ...          0.0          0.0          0.0          0.0          0.0   \n",
       "1  ...          0.0          0.0          0.0          0.0          0.0   \n",
       "2  ...          1.0          0.0          0.0          0.0          0.0   \n",
       "3  ...          0.0          0.0          0.0          0.0          0.0   \n",
       "4  ...          0.0          0.0          0.0          0.0          0.0   \n",
       "\n",
       "   Arrival_ORD  Arrival_PHL  Arrival_PHX  Arrival_SEA  Arrival_SFO  \n",
       "0          0.0          0.0          0.0          0.0          0.0  \n",
       "1          0.0          0.0          0.0          0.0          0.0  \n",
       "2          0.0          0.0          0.0          0.0          0.0  \n",
       "3          1.0          0.0          0.0          0.0          0.0  \n",
       "4          0.0          0.0          0.0          0.0          1.0  \n",
       "\n",
       "[5 rows x 40 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "columns_encoded = encoder.get_feature_names_out(data_categorical.columns)\n",
    "pd.DataFrame(data_encoded, columns=columns_encoded).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "fd403ba6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WeeksToDeparture</th>\n",
       "      <th>log_PAX</th>\n",
       "      <th>std_wtd</th>\n",
       "      <th>day</th>\n",
       "      <th>week</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>Holiday</th>\n",
       "      <th>Departure_ATL</th>\n",
       "      <th>Departure_BOS</th>\n",
       "      <th>...</th>\n",
       "      <th>Arrival_LAX</th>\n",
       "      <th>Arrival_LGA</th>\n",
       "      <th>Arrival_MCO</th>\n",
       "      <th>Arrival_MIA</th>\n",
       "      <th>Arrival_MSP</th>\n",
       "      <th>Arrival_ORD</th>\n",
       "      <th>Arrival_PHL</th>\n",
       "      <th>Arrival_PHX</th>\n",
       "      <th>Arrival_SEA</th>\n",
       "      <th>Arrival_SFO</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12.875000</td>\n",
       "      <td>12.331296</td>\n",
       "      <td>9.812647</td>\n",
       "      <td>19</td>\n",
       "      <td>25</td>\n",
       "      <td>6</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14.285714</td>\n",
       "      <td>10.775182</td>\n",
       "      <td>9.466734</td>\n",
       "      <td>10</td>\n",
       "      <td>37</td>\n",
       "      <td>9</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10.863636</td>\n",
       "      <td>11.083177</td>\n",
       "      <td>9.035883</td>\n",
       "      <td>5</td>\n",
       "      <td>40</td>\n",
       "      <td>10</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.480000</td>\n",
       "      <td>11.169268</td>\n",
       "      <td>7.990202</td>\n",
       "      <td>9</td>\n",
       "      <td>40</td>\n",
       "      <td>10</td>\n",
       "      <td>2011</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11.450000</td>\n",
       "      <td>11.269364</td>\n",
       "      <td>9.517159</td>\n",
       "      <td>21</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8897</th>\n",
       "      <td>9.263158</td>\n",
       "      <td>10.427055</td>\n",
       "      <td>7.316967</td>\n",
       "      <td>2</td>\n",
       "      <td>39</td>\n",
       "      <td>10</td>\n",
       "      <td>2011</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8898</th>\n",
       "      <td>12.772727</td>\n",
       "      <td>12.201552</td>\n",
       "      <td>10.641034</td>\n",
       "      <td>25</td>\n",
       "      <td>39</td>\n",
       "      <td>9</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8899</th>\n",
       "      <td>11.047619</td>\n",
       "      <td>10.508746</td>\n",
       "      <td>7.908705</td>\n",
       "      <td>19</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8900</th>\n",
       "      <td>6.076923</td>\n",
       "      <td>10.174042</td>\n",
       "      <td>4.030334</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2013</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8901</th>\n",
       "      <td>9.526316</td>\n",
       "      <td>9.202674</td>\n",
       "      <td>6.167733</td>\n",
       "      <td>26</td>\n",
       "      <td>47</td>\n",
       "      <td>11</td>\n",
       "      <td>2011</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8902 rows × 48 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      WeeksToDeparture    log_PAX    std_wtd  day  week  month  year  Holiday  \\\n",
       "0            12.875000  12.331296   9.812647   19    25      6  2012        0   \n",
       "1            14.285714  10.775182   9.466734   10    37      9  2012        0   \n",
       "2            10.863636  11.083177   9.035883    5    40     10  2012        0   \n",
       "3            11.480000  11.169268   7.990202    9    40     10  2011        0   \n",
       "4            11.450000  11.269364   9.517159   21     8      2  2012        0   \n",
       "...                ...        ...        ...  ...   ...    ...   ...      ...   \n",
       "8897          9.263158  10.427055   7.316967    2    39     10  2011        0   \n",
       "8898         12.772727  12.201552  10.641034   25    39      9  2012        0   \n",
       "8899         11.047619  10.508746   7.908705   19     3      1  2012        0   \n",
       "8900          6.076923  10.174042   4.030334    3     5      2  2013        0   \n",
       "8901          9.526316   9.202674   6.167733   26    47     11  2011        0   \n",
       "\n",
       "      Departure_ATL  Departure_BOS  ...  Arrival_LAX  Arrival_LGA  \\\n",
       "0               0.0            0.0  ...          0.0          0.0   \n",
       "1               0.0            0.0  ...          0.0          0.0   \n",
       "2               0.0            0.0  ...          1.0          0.0   \n",
       "3               1.0            0.0  ...          0.0          0.0   \n",
       "4               0.0            0.0  ...          0.0          0.0   \n",
       "...             ...            ...  ...          ...          ...   \n",
       "8897            0.0            0.0  ...          0.0          0.0   \n",
       "8898            0.0            0.0  ...          0.0          0.0   \n",
       "8899            0.0            0.0  ...          0.0          0.0   \n",
       "8900            0.0            0.0  ...          0.0          0.0   \n",
       "8901            0.0            0.0  ...          0.0          0.0   \n",
       "\n",
       "      Arrival_MCO  Arrival_MIA  Arrival_MSP  Arrival_ORD  Arrival_PHL  \\\n",
       "0             0.0          0.0          0.0          0.0          0.0   \n",
       "1             0.0          0.0          0.0          0.0          0.0   \n",
       "2             0.0          0.0          0.0          0.0          0.0   \n",
       "3             0.0          0.0          0.0          1.0          0.0   \n",
       "4             0.0          0.0          0.0          0.0          0.0   \n",
       "...           ...          ...          ...          ...          ...   \n",
       "8897          0.0          0.0          0.0          0.0          0.0   \n",
       "8898          0.0          0.0          0.0          1.0          0.0   \n",
       "8899          0.0          0.0          0.0          0.0          0.0   \n",
       "8900          0.0          0.0          0.0          0.0          1.0   \n",
       "8901          0.0          0.0          0.0          0.0          0.0   \n",
       "\n",
       "      Arrival_PHX  Arrival_SEA  Arrival_SFO  \n",
       "0             0.0          0.0          0.0  \n",
       "1             0.0          0.0          0.0  \n",
       "2             0.0          0.0          0.0  \n",
       "3             0.0          0.0          0.0  \n",
       "4             0.0          0.0          1.0  \n",
       "...           ...          ...          ...  \n",
       "8897          0.0          0.0          0.0  \n",
       "8898          0.0          0.0          0.0  \n",
       "8899          0.0          0.0          0.0  \n",
       "8900          0.0          0.0          0.0  \n",
       "8901          0.0          0.0          0.0  \n",
       "\n",
       "[8902 rows x 48 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_clean = pd.concat([data, pd.DataFrame(data_encoded, columns=columns_encoded)], axis=1)\n",
    "data_clean.drop(['Departure','Arrival'], axis=1, inplace = True)\n",
    "data_clean"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "931cc6db",
   "metadata": {},
   "source": [
    "## Question 10 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "20e7e1d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['WeeksToDeparture', 'std_wtd', 'day', 'month', 'year', 'Holiday'] ['Departure', 'Arrival']\n"
     ]
    }
   ],
   "source": [
    "scaling_columns = list(data_train.columns)\n",
    "one_hot_encoding_columns = list(data_categorical.columns)\n",
    "print(scaling_columns, one_hot_encoding_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a2cf85d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "preprocessor =  ColumnTransformer([\n",
    "    ('one-hot-encoder', OneHotEncoder(handle_unknown='ignore'),\n",
    "     one_hot_encoding_columns),\n",
    "    ('standard-scaler', StandardScaler(), scaling_columns)\n",
    "])\n",
    "\n",
    "model = make_pipeline(preprocessor,\n",
    "                      RandomForestRegressor(max_depth=9)\n",
    "                     )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b77d8287",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X = data.loc[:, data.columns!='log_PAX']\n",
    "y = data.loc[:,'log_PAX']\n",
    "\n",
    "data_train, data_test, target_train, target_test = train_test_split(X, y, random_state=42)\n",
    "\n",
    "print(\n",
    "    f\"The training dataset contains {data_train.shape[0]} samples and \"\n",
    "    f\"{data_train.shape[1]} features\"\n",
    ")\n",
    "print(\n",
    "    f\"The testing dataset contains {data_test.shape[0]} samples and \"\n",
    "    f\"{data_test.shape[1]} features\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0c0cfa53",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.fit(data_train, target_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32d9b030",
   "metadata": {},
   "source": [
    "## Question 11"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ff610c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "for param_name in model.get_params().keys():\n",
    "    print(param_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2a2a335",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "param_grid = {'randomforestregressor__n_estimators' : range(1,10), \n",
    "              'randomforestregressor__max_depth' : range(1,10)}\n",
    "\n",
    "model_grid_search = GridSearchCV(model, param_grid=param_grid, n_jobs=4, cv=5)# cv = 5 fold cross-validation # n_jobs = nb of core on the computer\n",
    "start = time.time()\n",
    "model_grid_search.fit(data_train, target_train)\n",
    "elapsed_time = time.time() - start\n",
    "print(\n",
    "    f\"The accuracy score using a {model_grid_search.__class__.__name__} is \"\n",
    "    f\"{model_grid_search.score(data_test, target_test):.2f} in \"\n",
    "    f\"{elapsed_time:.3f} seconds\"\n",
    ")\n",
    "print(f\"The best set of parameters is: {model_grid_search.best_params_}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89e90b53",
   "metadata": {},
   "source": [
    "This operation takes about 20s which is quite time consuming"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "895ef51a",
   "metadata": {},
   "outputs": [],
   "source": [
    "model_tuned = make_pipeline(preprocessor,\n",
    "                      RandomForestRegressor(n_estimators=8\n",
    "                                            ,max_depth=9, )\n",
    "                     )\n",
    "start = time.time()\n",
    "model_tuned.fit(data_train, target_train)\n",
    "elapsed_time = time.time() - start \n",
    "\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "scores = cross_val_score(model_tuned, data_train, target_train, cv=5)\n",
    "print(f\"The different scores obtained are: \\n{scores}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94bcf7fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "scores = cross_val_score(model_tuned, data_test, target_test, cv=5)\n",
    "print(f\"The different scores obtained are: \\n{scores}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "669278cd",
   "metadata": {},
   "source": [
    "## Question 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6016979a",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(model_grid_search.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3266dcc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#save model\n",
    "import joblib\n",
    "\n",
    "filename = 'finalized_model_lab3.sav'\n",
    "joblib.dump(model, filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7936a1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import it from disk \n",
    "\n",
    "loaded_model = joblib.load(filename)\n",
    "result = loaded_model.score(data_test, target_test)\n",
    "print(result)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
